<!DOCTYPE html>
<html>
<head>
    <title>Productos</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <script src="/socket.io/socket.io.js"></script>
    <!-- Estilos personalizados -->
    <style>
        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: #ff6b00;
            border-radius: 50%;
            padding: 20px;
        }

        .carousel-control-prev,
        .carousel-control-next {
            width: 10%;
        }

        .carousel-control-prev:hover .carousel-control-prev-icon,
        .carousel-control-next:hover .carousel-control-next-icon {
            background-color: #ff8533;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Barra de navegación -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
            <div class="container-fluid">
                <a class="navbar-brand" href="/products">Lista de Productos</a>
                <button id="viewCartBtn" class="btn btn-outline-primary" onclick="viewCart()">
                    Ver Carrito
                </button>
            </div>
        </nav>

        <h1>Lista de Productos</h1>
        
        <!-- Toast para notificaciones -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Notificación</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="row mb-4">
            <div class="col">
                <form id="filterForm" class="d-flex gap-3 align-items-center">
                    <input type="text" 
                           name="query" 
                           class="form-control" 
                           placeholder="Buscar productos..." 
                           value="{{searchQuery}}"
                           style="width: auto;">

                    <select name="category" class="form-select" style="width: auto;">
                        <option value="">Todas las categorías</option>
                        {{#each categories}}
                        <option value="{{this}}" {{#if (eq ../selectedCategory this)}}selected{{/if}}>{{this}}</option>
                        {{/each}}
                    </select>

                    <select name="sort" class="form-select" style="width: auto;">
                        <option value="">Sin ordenar</option>
                        <option value="asc" {{#if (eq sort "asc")}}selected{{/if}}>Precio: Menor a Mayor</option>
                        <option value="desc" {{#if (eq sort "desc")}}selected{{/if}}>Precio: Mayor a Menor</option>
                    </select>

                    <select name="limit" class="form-select" style="width: auto;">
                        <option value="10" {{#if (eq limit "10")}}selected{{/if}}>10 por página</option>
                        <option value="20" {{#if (eq limit "20")}}selected{{/if}}>20 por página</option>
                        <option value="50" {{#if (eq limit "50")}}selected{{/if}}>50 por página</option>
                    </select>

                    <button type="submit" class="btn btn-primary">Aplicar Filtros</button>
                    <button type="button" class="btn btn-secondary" onclick="clearFilters()">Limpiar Filtros</button>
                </form>
            </div>
        </div>

        <!-- Lista de Productos -->
        <div class="row row-cols-1 row-cols-md-3 g-4">
            {{#each products}}
            <div class="col">
                <div class="card h-100">
                    <!-- Carrusel de imágenes -->
                    <div id="carousel-{{_id}}" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            {{#each thumbnails}}
                            <div class="carousel-item {{#if @first}}active{{/if}}">
                                <img src="{{this}}" class="card-img-top d-block w-100" alt="{{../title}}" style="height: 200px; object-fit: cover;">
                            </div>
                            {{/each}}
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">{{title}}</h5>
                        <p class="card-text">{{description}}</p>
                        <p class="card-text"><strong>Precio: ${{price}}</strong></p>
                        <div class="alert alert-info">
                            <p class="mb-1">Stock sin reservar: <strong><span id="stock-{{_id}}">{{stock}}</span></strong></p>
                            <p class="mb-0">En tu carrito: <strong><span id="cart-quantity-{{_id}}">0</span></strong></p>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <a href="/products/{{_id}}" class="btn btn-info">Ver Detalles</a>
                            <button onclick="addToCart('{{_id}}')" 
                                    class="btn btn-success"
                                    id="add-btn-{{_id}}"
                                    {{#if (eq stock 0)}}disabled{{/if}}>
                                {{#if (eq stock 0)}}
                                    Sin stock disponible
                                {{else}}
                                    Agregar 1 unidad
                                {{/if}}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>

        <!-- Paginación -->
        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    {{#if pagination.hasPrevPage}}
                    <li class="page-item">
                        <a class="page-link" href="{{pagination.prevLink}}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    {{/if}}
                    
                    <li class="page-item active">
                        <span class="page-link">Página {{pagination.page}} de {{pagination.totalPages}}</span>
                    </li>
                    
                    {{#if pagination.hasNextPage}}
                    <li class="page-item">
                        <a class="page-link" href="{{pagination.nextLink}}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    {{/if}}
                </ul>
            </nav>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Inicializar Socket.IO
        const socket = io();

        // Escuchar eventos de actualización de stock
        socket.on('stockUpdate', function(data) {
            console.log('Recibida actualización de stock:', data);
            const stockSpan = document.getElementById(`stock-${data.productId}`);
            const addButton = document.getElementById(`add-btn-${data.productId}`);
            
            if (stockSpan) {
                stockSpan.textContent = data.stock;
                
                // Actualizar estado del botón
                if (data.stock <= 0) {
                    addButton.disabled = true;
                    addButton.textContent = 'Sin stock disponible';
                } else {
                    addButton.disabled = false;
                    addButton.textContent = 'Agregar 1 unidad';
                }
            }
        });

        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
        const toastBody = document.querySelector('.toast-body');

        function clearFilters() {
            window.location.href = '/products';
        }

        function validateQuantity(input, maxStock) {
            let value = parseInt(input.value);
            if (isNaN(value) || value < 1) {
                input.value = 1;
            } else if (value > maxStock) {
                input.value = maxStock;
                toastBody.textContent = `La cantidad máxima disponible es ${maxStock}`;
                toastBody.classList.remove('text-success');
                toastBody.classList.add('text-warning');
                toast.show();
            }
        }

        const cartId = localStorage.getItem('cartId');

        async function addToCart(productId) {
            try {
                const stockSpan = document.getElementById(`stock-${productId}`);
                const cartQuantitySpan = document.getElementById(`cart-quantity-${productId}`);
                const addButton = document.getElementById(`add-btn-${productId}`);
                
                const currentStock = parseInt(stockSpan.textContent);
                
                if (currentStock <= 0) {
                    throw new Error('No hay stock disponible');
                }

                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: 1 })
                });

                const result = await response.json();
                
                if (result.status === 'success') {
                    const updatedProduct = result.payload.products.find(p => p.product._id === productId);
                    if (updatedProduct) {
                        // Actualizar stock disponible
                        stockSpan.textContent = updatedProduct.product.stock;
                        // Actualizar cantidad en carrito
                        cartQuantitySpan.textContent = updatedProduct.quantity;
                        
                        // Actualizar estado del botón
                        if (updatedProduct.product.stock <= 0) {
                            addButton.disabled = true;
                            addButton.textContent = 'Sin stock disponible';
                        }
                    }
                    
                    toastBody.textContent = '1 unidad agregada al carrito';
                    toastBody.classList.remove('text-danger');
                    toastBody.classList.add('text-success');
                    toast.show();
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Error:', error);
                toastBody.textContent = error.message;
                toastBody.classList.remove('text-success');
                toastBody.classList.add('text-danger');
                toast.show();
            }
        }

        function viewCart() {
            const cartId = localStorage.getItem('cartId');
            if (cartId) {
                window.location.href = `/carts/${cartId}`;
            } else {
                toastBody.textContent = 'No hay carrito creado';
                toastBody.classList.remove('text-success');
                toastBody.classList.add('text-warning');
                toast.show();
            }
        }

        // Mantener los filtros seleccionados en el formulario
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const params = new URLSearchParams();
            
            for (let [key, value] of formData.entries()) {
                if (value) params.append(key, value);
            }
            
            window.location.href = `/products?${params.toString()}`;
        });

        // Función para actualizar los filtros en los enlaces de paginación
        function updatePaginationLinks() {
            const params = new URLSearchParams(window.location.search);
            const links = document.querySelectorAll('.pagination a');
            
            links.forEach(link => {
                const url = new URL(link.href);
                const pageParams = new URLSearchParams(url.search);
                
                // Mantener los filtros actuales
                if (params.get('category')) pageParams.set('category', params.get('category'));
                if (params.get('sort')) pageParams.set('sort', params.get('sort'));
                if (params.get('limit')) pageParams.set('limit', params.get('limit'));
                
                link.href = `${url.pathname}?${pageParams.toString()}`;
            });
        }

        // Actualizar enlaces de paginación cuando se carga la página
        document.addEventListener('DOMContentLoaded', updatePaginationLinks);

        // Cargar cantidades actuales del carrito al iniciar
        async function loadCartQuantities() {
            try {
                const cartId = localStorage.getItem('cartId');
                if (!cartId) return;

                const response = await fetch(`/api/carts/${cartId}`);
                const result = await response.json();
                
                if (result.status === 'success') {
                    result.payload.products.forEach(item => {
                        const cartQuantitySpan = document.getElementById(`cart-quantity-${item.product._id}`);
                        const addButton = document.getElementById(`add-btn-${item.product._id}`);
                        const stockSpan = document.getElementById(`stock-${item.product._id}`);
                        
                        if (cartQuantitySpan) {
                            cartQuantitySpan.textContent = item.quantity;
                            
                            // Si ya tienes todo el stock en el carrito, deshabilitar el botón
                            if (item.quantity >= parseInt(stockSpan.textContent)) {
                                addButton.disabled = true;
                                addButton.textContent = 'Máximo en carrito';
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error al cargar cantidades del carrito:', error);
            }
        }

        // Cargar cantidades al iniciar la página
        document.addEventListener('DOMContentLoaded', loadCartQuantities);
    </script>
</body>
</html> 