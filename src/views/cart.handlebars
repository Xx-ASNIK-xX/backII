<!DOCTYPE html>
<html>
<head>
    <title>Carrito de Compras</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.css">
</head>
<body>
    <div class="container mt-4">
        <!-- Toast para notificaciones -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Notificación</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                </div>
            </div>
        </div>

        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/products">Productos</a></li>
                <li class="breadcrumb-item active">Carrito</li>
            </ol>
        </nav>

        <h1>Carrito de Compras</h1>

        {{#if cart.products.length}}
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Precio</th>
                        <th>Cantidad</th>
                        <th>Stock Disponible</th>
                        <th>Subtotal</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each cart.products}}
                    {{#if this.product}}
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                {{#if this.product.thumbnails.[0]}}
                                <img src="{{this.product.thumbnails.[0]}}" alt="{{this.product.title}}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;">
                                {{/if}}
                                <div>
                                    <h6 class="mb-0">{{this.product.title}}</h6>
                                    <small class="text-muted">Código: {{this.product.code}}</small>
                                </div>
                            </div>
                        </td>
                        <td>${{this.product.price}}</td>
                        <td>
                            <div class="input-group" style="width: 120px;">
                                <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} - 1)" {{#if (eq this.quantity 1)}}disabled{{/if}}>-</button>
                                <input type="number" class="form-control text-center" value="{{this.quantity}}" min="1" max="{{add this.quantity this.product.stock}}" onchange="updateQuantity('{{this.product._id}}', this.value)">
                                <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} + 1)" {{#if (eq this.product.stock 0)}}disabled{{/if}}>+</button>
                            </div>
                        </td>
                        <td>{{this.product.stock}}</td>
                        <td>${{multiply this.product.price this.quantity}}</td>
                        <td>
                            <button class="btn btn-danger btn-sm" onclick="removeProduct('{{this.product._id}}')">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                    {{else}}
                    <tr>
                        <td colspan="6" class="text-center text-muted">
                            <em>Producto no disponible</em>
                            <button class="btn btn-danger btn-sm ms-2" onclick="removeProduct('{{this._id}}')">
                                Eliminar del carrito
                            </button>
                        </td>
                    </tr>
                    {{/if}}
                    {{/each}}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4" class="text-end"><strong>Total:</strong></td>
                        <td><strong>${{cartTotal cart.products}}</strong></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button class="btn btn-danger" onclick="clearCart()">
                Vaciar Carrito
            </button>
            <a href="/products" class="btn btn-primary">
                Seguir Comprando
            </a>
        </div>
        {{else}}
        <div class="text-center my-5">
            <h3>Tu carrito está vacío</h3>
            <p>¿Por qué no agregas algunos productos?</p>
            <a href="/products" class="btn btn-primary">
                Ver Productos
            </a>
        </div>
        {{/if}}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
        const toastBody = document.querySelector('.toast-body');

        function showNotification(message, type = 'error') {
            // Limpiar clases anteriores
            toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
            
            // Agregar nuevas clases según el tipo
            if (type === 'error') {
                toastBody.parentElement.classList.add('bg-danger', 'text-white');
            } else if (type === 'success') {
                toastBody.parentElement.classList.add('bg-success', 'text-white');
            }
            
            toastBody.textContent = message;
            toast.show();
        }

        async function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) return;
            
            try {
                const response = await fetch(`/api/carts/{{cart._id}}/products/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: parseInt(newQuantity) })
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const errorData = await response.json();
                    Swal.fire({
                        title: 'Stock Insuficiente',
                        text: 'No hay suficiente stock disponible para la cantidad solicitada',
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#ffc107'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Error al actualizar la cantidad',
                    icon: 'error',
                    confirmButtonText: 'Aceptar',
                    confirmButtonColor: '#dc3545'
                });
            }
        }

        async function removeProduct(productId) {
            const result = await Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Quieres eliminar este producto del carrito?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                reverseButtons: true
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/api/carts/{{cart._id}}/products/${productId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        await Swal.fire({
                            title: '¡Eliminado!',
                            text: 'El producto ha sido eliminado del carrito.',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        });
                        location.reload();
                    } else {
                        throw new Error('Error al eliminar el producto');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Error al eliminar el producto',
                        icon: 'error',
                        confirmButtonText: 'Aceptar',
                        confirmButtonColor: '#dc3545'
                    });
                }
            }
        }

        async function clearCart() {
            const result = await Swal.fire({
                title: '¿Estás seguro?',
                text: '¿Quieres vaciar todo el carrito? Esta acción no se puede deshacer.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, vaciar carrito',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                reverseButtons: true
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/api/carts/{{cart._id}}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        await Swal.fire({
                            title: '¡Carrito vaciado!',
                            text: 'Tu carrito ha sido vaciado correctamente.',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        });
                        location.reload();
                    } else {
                        throw new Error('Error al vaciar el carrito');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Error al vaciar el carrito',
                        icon: 'error',
                        confirmButtonText: 'Aceptar',
                        confirmButtonColor: '#dc3545'
                    });
                }
            }
        }
    </script>
</body>
</html> 