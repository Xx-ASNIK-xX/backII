<!DOCTYPE html>
<html>
<head>
    <title>{{product.title}} - Detalle</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <!-- Estilos personalizados -->
    <style>
        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: #0d6efd;
            border-radius: 50%;
            padding: 20px;
        }

        .carousel-control-prev,
        .carousel-control-next {
            width: 10%;
        }

        .carousel-control-prev:hover .carousel-control-prev-icon,
        .carousel-control-next:hover .carousel-control-next-icon {
            background-color: #0b5ed7;
        }

        .disabled-controls .input-group {
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Toast para notificaciones -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Notificación</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body"></div>
            </div>
        </div>

        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/products">Productos</a></li>
                <li class="breadcrumb-item active">{{product.title}}</li>
            </ol>
        </nav>

        <div class="row">
            <!-- Imágenes del producto -->
            <div class="col-md-6">
                {{#if product.thumbnails.[0]}}
                <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        {{#each product.thumbnails}}
                        <div class="carousel-item {{#if @first}}active{{/if}}">
                            <img src="{{this}}" class="d-block w-100" alt="{{../product.title}}">
                        </div>
                        {{/each}}
                    </div>
                    {{#if (gt product.thumbnails.length 1)}}
                    <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Anterior</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Siguiente</span>
                    </button>
                    {{/if}}
                </div>
                {{else}}
                <div class="text-center">
                    <img src="/img/no-image.jpg" class="img-fluid" alt="Sin imagen">
                </div>
                {{/if}}
            </div>

            <!-- Información del producto -->
            <div class="col-md-6">
                <h1>{{product.title}}</h1>
                <p class="lead">{{product.description}}</p>
                <p class="h3 mb-4">${{product.price}}</p>
                
                <div class="alert alert-info mb-4">
                    <p class="mb-1">Stock sin reservar: <strong><span id="stock-display">{{product.stock}}</span></strong></p>
                    <p class="mb-0">En tu carrito: <strong><span id="cart-quantity">0</span></strong></p>
                </div>

                <div class="d-flex gap-2 align-items-center mb-4">
                    <button onclick="addToCart('{{product._id}}')" 
                            class="btn btn-success btn-lg"
                            id="add-btn"
                            {{#if (eq product.stock 0)}}disabled{{/if}}>
                        {{#if (eq product.stock 0)}}
                            Sin stock disponible
                        {{else}}
                            Agregar 1 unidad
                        {{/if}}
                    </button>
                    <button onclick="viewCart()" class="btn btn-outline-primary btn-lg">Ver Carrito</button>
                </div>

                <div class="product-details">
                    <p><strong>Código:</strong> {{product.code}}</p>
                    <p><strong>Categoría:</strong> {{product.category}}</p>
                    <p><strong>Estado:</strong> {{#if product.status}}Disponible{{else}}No disponible{{/if}}</p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
        const toastBody = document.querySelector('.toast-body');
        const productId = '{{product._id}}';
        const cartId = localStorage.getItem('cartId');

        // Elementos del DOM
        const stockDisplay = document.getElementById('stock-display');
        const cartQuantityDisplay = document.getElementById('cart-quantity');
        const addButton = document.getElementById('add-btn');

        // Escuchar actualizaciones de stock en tiempo real
        socket.on('stockUpdate', function(data) {
            if (data.productId === productId) {
                console.log('Actualización de stock recibida:', data);
                updateInterface(data.stock);
            }
        });

        // Función para actualizar la interfaz según el stock
        async function updateInterface(stock) {
            try {
                // Obtener cantidad actual en el carrito
                const cartResponse = await fetch(`/api/carts/${cartId}`);
                const cartData = await cartResponse.json();
                
                if (cartData.status === 'success') {
                    const productInCart = cartData.payload.products.find(p => p.product._id === productId);
                    const quantityInCart = productInCart ? productInCart.quantity : 0;
                    
                    // Actualizar displays
                    stockDisplay.textContent = stock;
                    cartQuantityDisplay.textContent = quantityInCart;

                    // Actualizar estado del botón
                    if (stock <= 0) {
                        addButton.disabled = true;
                        addButton.textContent = 'Sin stock disponible';
                        addButton.classList.remove('btn-success');
                        addButton.classList.add('btn-secondary');
                    } else {
                        addButton.disabled = false;
                        addButton.textContent = 'Agregar 1 unidad';
                        addButton.classList.remove('btn-secondary');
                        addButton.classList.add('btn-success');
                    }
                }
            } catch (error) {
                console.error('Error al actualizar la interfaz:', error);
                showToast('Error al actualizar la información de stock', 'error');
            }
        }

        function showToast(message, type = 'success') {
            toastBody.textContent = message;
            toastBody.className = 'toast-body';
            toastBody.classList.add(type === 'error' ? 'text-danger' : 'text-success');
            toast.show();
        }

        async function addToCart(productId) {
            try {
                const currentStock = parseInt(stockDisplay.textContent);
                
                if (currentStock <= 0) {
                    throw new Error('No hay stock disponible');
                }

                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: 1 })
                });

                const result = await response.json();
                
                if (result.status === 'success') {
                    const updatedProduct = result.payload.products.find(p => p.product._id === productId);
                    if (updatedProduct) {
                        updateInterface(updatedProduct.product.stock);
                    }
                    showToast('1 unidad agregada al carrito');
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                console.error('Error:', error);
                showToast(error.message, 'error');
            }
        }

        // Cargar cantidad actual en el carrito al iniciar
        async function loadCartQuantity() {
            try {
                if (!cartId) return;
                const response = await fetch(`/api/carts/${cartId}`);
                const result = await response.json();
                
                if (result.status === 'success') {
                    const productInCart = result.payload.products.find(item => item.product._id === productId);
                    if (productInCart) {
                        cartQuantityDisplay.textContent = productInCart.quantity;
                        updateInterface(productInCart.product.stock);
                    }
                }
            } catch (error) {
                console.error('Error al cargar cantidad del carrito:', error);
            }
        }

        // Inicialización
        document.addEventListener('DOMContentLoaded', loadCartQuantity);

        // Actualizar cuando la página se hace visible
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible') {
                loadCartQuantity();
            }
        });

        async function viewCart() {
            try {
                let cartId = localStorage.getItem('cartId');
                
                if (!cartId) {
                    // Si no hay carrito, crear uno nuevo
                    const response = await fetch('/api/carts', {
                        method: 'POST'
                    });
                    
                    if (!response.ok) {
                        throw new Error('Error al crear el carrito');
                    }
                    
                    const result = await response.json();
                    cartId = result.payload._id;
                    localStorage.setItem('cartId', cartId);
                }
                
                window.location.href = `/carts/${cartId}`;
            } catch (error) {
                console.error('Error:', error);
                showToast('Error al acceder al carrito', 'error');
            }
        }
    </script>
</body>
</html> 